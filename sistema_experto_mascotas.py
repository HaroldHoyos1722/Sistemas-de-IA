
"""Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17hbjF8AADFAK1PAMn9VB8Y074QchrXlE

# **Sistema Experto para la Selecci√≥n de Mascota**

**Descripci√≥n:**
Este sistema experto, desarrollado en CLIPS, ayuda a una persona a elegir la mascota m√°s adecuada seg√∫n sus condiciones y preferencias.
Utiliza un conjunto de reglas l√≥gicas para comparar las caracter√≠sticas de diversas mascotas con los datos proporcionados por el usuario.

Ofrecer una recomendaci√≥n personalizada de mascota que se ajuste a:

*   El espacio disponible en el hogar
*   El tiempo que el usuario puede dedicar a su cuidado
*   El presupuesto disponible para su manutenci√≥n
*   La existencia o no de alergias

Realizado por: Harold Hoyos Cano (harold_hoyos82221@elpoli.edu.co)
"""

#Instalaci√≥n de librerias
# Si necesitas instalar dependencias, hazlo desde la terminal:
# pip install clipspy
# pip install gradio
import clips
import gradio as gr
print("Importados correctamente")

#Creacion del ambiente, definici√≥n de reglas y plantillas
env = clips.Environment()

# Definici√≥n de plantillas
env.build('(deftemplate preferencias (slot espacio (type STRING)) (slot tiempo (type STRING)) (slot presupuesto (type STRING)) (slot alergias (type STRING)))')
env.build('(deftemplate recomendacion (slot mascota (type STRING)))')
env.build('(deftemplate regla-ejecutada (slot nombre (type STRING)))')

#Definicion de reglas

# ------------------ MASCOTAS PEQUE√ëAS ------------------
env.build('''
(defrule regla-pez-tortuga
   (or (preferencias (espacio "peque√±o") (tiempo "poco") (presupuesto "bajo") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-pez-tortuga")))
   (assert (recomendacion (mascota "Pez o Tortuga"))))
''')

env.build('''
(defrule regla-hamster-cuy
   (or (preferencias (espacio "peque√±o") (tiempo "medio") (presupuesto "bajo") (alergias "si"))
       (preferencias (espacio "peque√±o") (tiempo "medio") (presupuesto "bajo") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-hamster-cuy")))
   (assert (recomendacion (mascota "H√°mster o Cuy"))))
''')

env.build('''
(defrule regla-loro-periquito
   (or (preferencias (espacio "peque√±o") (tiempo "medio") (presupuesto "medio") (alergias "si"))
       (preferencias (espacio "peque√±o") (tiempo "medio") (presupuesto "alto") (alergias "si")))
=>
   (assert (regla-ejecutada (nombre "regla-loro-periquito")))
   (assert (recomendacion (mascota "Loro, Canario o Periquito"))))
''')

env.build('''
(defrule regla-serpiente
   (or (preferencias (espacio "peque√±o") (tiempo "medio") (presupuesto "alto") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-serpiente")))
   (assert (recomendacion (mascota "Serpiente"))))
''')

env.build('''
(defrule regla-hormigas
   (or (preferencias (espacio "peque√±o") (tiempo "mucho") (presupuesto "alto") (alergias "no"))
       (preferencias (espacio "peque√±o") (tiempo "mucho") (presupuesto "bajo") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-hormigas")))
   (assert (recomendacion (mascota "Hormigas (hormiguero)"))))
''')

# ------------------ MASCOTAS MEDIANAS ------------------
env.build('''
(defrule regla-conejo
   (or (preferencias (espacio "mediano") (tiempo "poco") (presupuesto "bajo") (alergias "si"))
       (preferencias (espacio "mediano") (tiempo "poco") (presupuesto "medio") (alergias "si")))
=>
   (assert (regla-ejecutada (nombre "regla-conejo")))
   (assert (recomendacion (mascota "Conejo"))))
''')

env.build('''
(defrule regla-gato
   (or (preferencias (espacio "mediano") (tiempo "medio") (presupuesto "medio") (alergias "no"))
       (preferencias (espacio "grande") (tiempo "poco") (presupuesto "medio") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-gato")))
   (assert (recomendacion (mascota "Gato"))))
''')

env.build('''
(defrule regla-perro
   (or (preferencias (espacio "mediano") (tiempo "mucho") (presupuesto "medio") (alergias "no"))
       (preferencias (espacio "grande") (tiempo "mucho") (presupuesto "medio") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-perro")))
   (assert (recomendacion (mascota "Perro"))))
''')

env.build('''
(defrule regla-iguana
   (or (preferencias (espacio "mediano") (tiempo "mucho") (presupuesto "alto") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-iguana")))
   (assert (recomendacion (mascota "Iguana"))))
''')

# ------------------ MASCOTAS GRANDES ------------------
env.build('''
(defrule regla-gallinas
   (or (preferencias (espacio "grande") (tiempo "medio") (presupuesto "bajo") (alergias "no"))
       (preferencias (espacio "grande") (tiempo "poco") (presupuesto "bajo") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-gallinas")))
   (assert (recomendacion (mascota "Gallinas"))))
''')

env.build('''
(defrule regla-cerdos
   (or (preferencias (espacio "grande") (tiempo "medio") (presupuesto "medio") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-cerdos")))
   (assert (recomendacion (mascota "Cerdos"))))
''')

env.build('''
(defrule regla-vaca
   (or (preferencias (espacio "grande") (tiempo "medio") (presupuesto "alto") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-vaca")))
   (assert (recomendacion (mascota "Vaca"))))
''')

env.build('''
(defrule regla-caballo
   (or (preferencias (espacio "grande") (tiempo "mucho") (presupuesto "alto") (alergias "no")))
=>
   (assert (regla-ejecutada (nombre "regla-caballo")))
   (assert (recomendacion (mascota "Caballo"))))
''')

print("Ambiente CLIPS creado correctamente")

#Funcion para pasar valores de clips a interfaz grafica Gradio

def recomendar_mascota(espacio, tiempo, presupuesto, alergias):
    env.reset()
    if not espacio or not tiempo or not presupuesto or not alergias:
        return "‚ö†Ô∏è Por favor llene todos los campos.", "", ""

    env.assert_string(
        f'(preferencias (espacio "{espacio}") (tiempo "{tiempo}") '
        f'(presupuesto "{presupuesto}") (alergias "{alergias}"))'
    )
    env.run()

    recomendacion = None
    for fact in env.facts():
        if fact.template.name == "recomendacion":
            recomendacion = "‚úÖ Te recomendamos: " + fact["mascota"]

    lista_facts = [
        str(f) for f in env.facts() if f.template.name != "regla-ejecutada"
    ]

    # Reglas ejecutadas
    reglas = []
    for f in env.facts():
        if f.template.name == "regla-ejecutada":
            reglas.append(f["nombre"])
    reglas_unicas = list(dict.fromkeys(reglas))

    if not recomendacion:
        recomendacion = "üòï No encontramos una mascota adecuada con esas condiciones."

    return (
        recomendacion,
        "\n".join(lista_facts),
        "\n".join(f"{r}" for r in reglas_unicas) if reglas_unicas else "‚Äî"
    )

print("Funcion creada correctamente")

# Interfaz grafica de Gradio
opciones_espacio = [("Peque√±o (Habitaci√≥n)", "peque√±o"), ("Mediano (Departamento)", "mediano"), ("Grande (Finca)", "grande")]
opciones_tiempo = [("Poco", "poco"), ("Medio", "medio"), ("Mucho", "mucho")]
opciones_presupuesto = [("Bajo", "bajo"), ("Medio", "medio"), ("Alto", "alto")]
opciones_alergias = [("S√≠", "si"), ("No", "no")]

demo = gr.Interface(
    fn=recomendar_mascota,
    inputs=[
        gr.Radio(opciones_espacio, label="Espacio disponible"),
        gr.Radio(opciones_tiempo, label="Tiempo para cuidar"),
        gr.Radio(opciones_presupuesto, label="Presupuesto"),
        gr.Radio(opciones_alergias, label="¬øTienes alergias?")
    ],
    outputs=[
        gr.Textbox(label="Recomendaci√≥n"),
        gr.Textbox(label="Hechos en memoria"),
        gr.Textbox(label="Reglas ejecutadas"),
    ],
    title="üêæ Sistema Experto para elecci√≥n de Mascotas",
    description="Sistema experto en CLIPS que recomienda mascotas y muestra los hechos + reglas disparadas.",
    allow_flagging="never"
)

demo.launch()