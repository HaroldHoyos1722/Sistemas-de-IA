"""
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qhLP9_w9xF89JuA_8IC-pD4wEqhGLCwV

# Sistema de logica difusa de calidad de Software:

**Parametros:**
- Funcionalidad desarrollada[0-10]: 0-4: Incompleta, 3.5-7: Parcial, 6.5-10: Completa
- Est√©tica de la app[0-10]: 0-4.2:Fea, 3.8-7.2: Funcional, 7-10: Bonita
- Proyecto cumplido[0-10]: 0-5: No se cumplio, 4.5-7.2: Se cumpli√≥ con la mitad, 7-10: Se cumplio completamente

**Reglas:**
*   Si Funcionalidad desarrollada es incompleta y Est√©tica es fea ‚Üí Proyecto no cumplido
*   Si Funcionalidad desarrollada es incompleta y Est√©tica es funcional ‚Üí Proyecto no cumplido
*   Si Funcionalidad desarrollada es incompleta y Est√©tica es bonita ‚Üí Proyecto medio cumplido
*   Si Funcionalidad desarrollada es parcial y Est√©tica es fea ‚Üí Proyecto no cumplido
*   Si Funcionalidad desarrollada es parcial y Est√©tica es funcional ‚Üí Proyecto medio cumplido
*   Si Funcionalidad desarrollada es parcial y Est√©tica es bonita ‚Üí Proyecto medio cumplido
*   Si Funcionalidad desarrollada es completa y Est√©tica es fea ‚Üí Proyecto no cumplido
*   Si Funcionalidad desarrollada es completa y Est√©tica es funcional ‚Üí Proyecto medio cumplido
*   Si Funcionalidad desarrollada es completa y Est√©tica es bonita ‚Üí Proyecto completo
"""

#Instalaci√≥n de librerias
# pip install -U scikit-fuzzy
# pip install spicy
# pip install networkx
# pip install gradio

#Importar librerias
import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt
import gradio as gr
print ("ok import")

#Definici√≥n de variables
funcionalidad = ctrl.Antecedent(np.arange(0, 10.1, 0.1), 'Funcionalidad_Desarrollada')
estetica = ctrl.Antecedent(np.arange(0, 10.1, 0.1), 'Estetica_App')
proyecto = ctrl.Consequent(np.arange(0, 10.1, 0.1), 'Proyecto_Cumplido')
print ("ok variables")

#Configuracion de conjuntos
# Funcionalidad desarrollada
funcionalidad['incompleta'] = fuzz.trapmf(funcionalidad.universe, [0, 0, 2, 4])
funcionalidad['parcial']    = fuzz.trapmf(funcionalidad.universe, [3.5, 4.5, 5.5, 7])
funcionalidad['completa']   = fuzz.trapmf(funcionalidad.universe, [6.5, 8, 10, 10])

# Est√©tica de la app
estetica['fea']       = fuzz.trapmf(estetica.universe, [0, 0, 2, 4.2])
estetica['funcional'] = fuzz.trapmf(estetica.universe, [3.8, 5.5, 6.5, 7.2])
estetica['bonita']    = fuzz.trapmf(estetica.universe, [7, 8.5, 10, 10])

# Proyecto cumplido
proyecto['incumplido']        = fuzz.trapmf(proyecto.universe, [0, 0, 2.5, 5])
proyecto['mitad'] = fuzz.trapmf(proyecto.universe, [4.5, 5.5, 6.2, 7])
proyecto['completo'] = fuzz.trapmf(proyecto.universe, [9, 9.5, 10, 10])

print ("ok conjuntos")

#Definici√≥n de reglas

# Funcionalidad baja (incompleta)
rule_no_fun = ctrl.Rule(funcionalidad['incompleta'] & estetica['fea'], proyecto['incumplido'])
rule_mitad_fun = ctrl.Rule(funcionalidad['incompleta'] & estetica['funcional'], proyecto['incumplido'])
rule_mitad_fun_bonita = ctrl.Rule(funcionalidad['incompleta'] & estetica['bonita'], proyecto['mitad'])

# Funcionalidad media (parcial)
rule_mitad_parcial_fea = ctrl.Rule(funcionalidad['parcial'] & estetica['fea'], proyecto['incumplido'])
rule_mitad_parcial_funcional = ctrl.Rule(funcionalidad['parcial'] & estetica['funcional'], proyecto['mitad'])
rule_completo_parcial_bonita = ctrl.Rule(funcionalidad['parcial'] & estetica['bonita'], proyecto['completo'])

# Funcionalidad alta (completa)
rule_mitad_completa_fea = ctrl.Rule(funcionalidad['completa'] & estetica['fea'], proyecto['incumplido'])
rule_completo_completa_funcional = ctrl.Rule(funcionalidad['completa'] & estetica['funcional'], proyecto['mitad'])
rule_completo_completa_bonita = ctrl.Rule(funcionalidad['completa'] & estetica['bonita'], proyecto['completo'])


print ("ok reglas")

sistema_ctrl = ctrl.ControlSystem([
    rule_no_fun, rule_mitad_fun, rule_mitad_fun_bonita,
    rule_mitad_parcial_fea, rule_mitad_parcial_funcional, rule_completo_parcial_bonita,
    rule_mitad_completa_fea, rule_completo_completa_funcional, rule_completo_completa_bonita
])

sistema = ctrl.ControlSystemSimulation(sistema_ctrl)
print ("ok system")

def calcular_membresias(func_val, est_val):
    func_incompleta = fuzz.interp_membership(funcionalidad.universe, funcionalidad['incompleta'].mf, func_val)
    func_parcial    = fuzz.interp_membership(funcionalidad.universe, funcionalidad['parcial'].mf, func_val)
    func_completa   = fuzz.interp_membership(funcionalidad.universe, funcionalidad['completa'].mf, func_val)

    est_fea       = fuzz.interp_membership(estetica.universe, estetica['fea'].mf, est_val)
    est_funcional = fuzz.interp_membership(estetica.universe, estetica['funcional'].mf, est_val)
    est_bonita    = fuzz.interp_membership(estetica.universe, estetica['bonita'].mf, est_val)

    return {
        "Funcionalidad": {"incompleta": func_incompleta, "parcial": func_parcial, "completa": func_completa},
        "Est√©tica": {"fea": est_fea, "funcional": est_funcional, "bonita": est_bonita}
    }

def calcular_reglas(m):
    reglas = {}
    reglas["Regla 1 (Incompleta y Fea ‚Üí No)"]        = np.fmin(m["Funcionalidad"]["incompleta"], m["Est√©tica"]["fea"])
    reglas["Regla 2 (Incompleta y Funcional ‚Üí No)"]  = np.fmin(m["Funcionalidad"]["incompleta"], m["Est√©tica"]["funcional"])
    reglas["Regla 3 (Incompleta y Bonita ‚Üí Mitad)"]  = np.fmin(m["Funcionalidad"]["incompleta"], m["Est√©tica"]["bonita"])
    reglas["Regla 4 (Parcial y Fea ‚Üí No)"]           = np.fmin(m["Funcionalidad"]["parcial"], m["Est√©tica"]["fea"])
    reglas["Regla 5 (Parcial y Funcional ‚Üí Mitad)"]  = np.fmin(m["Funcionalidad"]["parcial"], m["Est√©tica"]["funcional"])
    reglas["Regla 6 (Parcial y Bonita ‚Üí Completo)"]  = np.fmin(m["Funcionalidad"]["parcial"], m["Est√©tica"]["bonita"])
    reglas["Regla 7 (Completa y Fea ‚Üí No)"]          = np.fmin(m["Funcionalidad"]["completa"], m["Est√©tica"]["fea"])
    reglas["Regla 8 (Completa y Funcional ‚Üí Mitad)"] = np.fmin(m["Funcionalidad"]["completa"], m["Est√©tica"]["funcional"])
    reglas["Regla 9 (Completa y Bonita ‚Üí Completo)"] = np.fmin(m["Funcionalidad"]["completa"], m["Est√©tica"]["bonita"])
    return reglas

# Funci√≥n que usar√° Gradio para pintar la grafica y calcular
def evaluar(func_val, est_val):
    sistema.input['Funcionalidad_Desarrollada'] = func_val
    sistema.input['Estetica_App'] = est_val
    sistema.compute()
    salida = sistema.output['Proyecto_Cumplido']

    memberships = {label: fuzz.interp_membership(proyecto.universe, proyecto[label].mf, salida)
                   for label in proyecto.terms}
    rango = max(memberships, key=memberships.get)

    fig, ax = plt.subplots(figsize=(6, 4))
    for label in proyecto.terms:
        ax.plot(proyecto.universe, proyecto[label].mf, label=label)
    ax.axvline(salida, color='k', linestyle='--', linewidth=1.5)
    ax.set_title("Proyecto Cumplido")
    ax.legend()
    plt.tight_layout()

    m = calcular_membresias(func_val, est_val)
    reglas = calcular_reglas(m)

    detalle = "üìå **Membres√≠as**\n"
    for k, v in m["Funcionalidad"].items():
        detalle += f"- Funcionalidad {k}: {v:.2f}\n"
    for k, v in m["Est√©tica"].items():
        detalle += f"- Est√©tica {k}: {v:.2f}\n"

    detalle += "\nüìå **Activaci√≥n de reglas**\n"
    for r, val in reglas.items():
        detalle += f"- {r}: {val:.2f}\n"

    return f"Proyecto cumplido = {rango.capitalize()} con {salida:.2f}", fig, detalle

# Interfaz en Gradio

with gr.Blocks(css=".gr-input-container input {display: none;}") as demo:
    gr.Markdown("# Sistema Difuso de Calidad de Software")
    gr.Markdown("Eval√∫a el cumplimiento de un proyecto de software seg√∫n su est√©tica y funcionalidades desarrolladas.")

    with gr.Row():
        with gr.Column(scale=1):
            func = gr.Slider(0, 10, step=0.1, label="Funcionalidad Desarrollada")
            est  = gr.Slider(0, 10, step=0.1, label="Est√©tica de la App")
            btn = gr.Button("Evaluar")
            detalle_box = gr.Textbox(label="C√°lculo detallado", lines=15)

        with gr.Column(scale=2):
            out1 = gr.Textbox(label="Resultado")
            out2 = gr.Plot(label="Proyecto Cumplido")

    btn.click(fn=evaluar, inputs=[func, est], outputs=[out1, out2, detalle_box])

demo.launch()
